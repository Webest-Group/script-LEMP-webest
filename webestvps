#!/bin/bash

# Màu sắc cho terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Kiểm tra quyền root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}Script này cần chạy với quyền root${NC}"
    exit 1
fi

# Các đường dẫn
INSTALL_DIR="/opt/webestvps"
CONFIG_DIR="/etc/webestvps"
LOG_DIR="/var/log/webestvps"
WEB_ROOT="/home/websites"

# Function hiển thị menu
show_menu() {
    clear
    echo -e "${GREEN}=== WEBEST VPS PANEL ===${NC}"
    echo
    echo -e "${YELLOW}1.${NC} Quản lý Domain"
    echo -e "${YELLOW}2.${NC} Quản lý SSL"
    echo -e "${YELLOW}3.${NC} Quản lý Database"
    echo -e "${YELLOW}4.${NC} Quản lý Backup"
    echo -e "${YELLOW}5.${NC} Quản lý Service"
    echo -e "${YELLOW}6.${NC} Cài đặt Laravel"
    echo -e "${YELLOW}7.${NC} Thông tin Server"
    echo -e "${YELLOW}8.${NC} Cập nhật Panel"
    echo -e "${YELLOW}0.${NC} Thoát"
    echo
    read -p "Nhập lựa chọn của bạn: " choice
}

# Function quản lý domain
manage_domain() {
    clear
    echo -e "${GREEN}=== QUẢN LÝ DOMAIN ===${NC}"
    echo
    echo -e "${YELLOW}1.${NC} Thêm domain mới"
    echo -e "${YELLOW}2.${NC} Xóa domain"
    echo -e "${YELLOW}3.${NC} Danh sách domain"
    echo -e "${YELLOW}0.${NC} Quay lại"
    echo
    read -p "Nhập lựa chọn của bạn: " domain_choice
    
    case $domain_choice in
        1)
            read -p "Nhập tên domain: " domain
            if [ -z "$domain" ]; then
                echo -e "${RED}Domain không được để trống${NC}"
                read -p "Nhấn Enter để tiếp tục..."
                return
            fi
            
            # Tạo thư mục cho domain
            mkdir -p "$WEB_ROOT/$domain"
            chown -R www-data:www-data "$WEB_ROOT/$domain"
            
            # Tạo cấu hình Nginx
            cat > "/etc/nginx/sites-available/$domain" << EOF
server {
    listen 80;
    listen [::]:80;
    server_name $domain www.$domain;
    
    root $WEB_ROOT/$domain;
    index index.php index.html index.htm;
    
    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }
    
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
    }
    
    location ~ /\.ht {
        deny all;
    }
}
EOF
            
            # Tạo symbolic link
            ln -sf "/etc/nginx/sites-available/$domain" "/etc/nginx/sites-enabled/"
            
            # Kiểm tra cấu hình Nginx
            nginx -t
            
            if [ $? -eq 0 ]; then
                systemctl reload nginx
                echo -e "${GREEN}Domain $domain đã được thêm thành công${NC}"
            else
                echo -e "${RED}Lỗi cấu hình Nginx${NC}"
                rm -f "/etc/nginx/sites-enabled/$domain"
            fi
            ;;
        2)
            read -p "Nhập tên domain cần xóa: " domain
            if [ -z "$domain" ]; then
                echo -e "${RED}Domain không được để trống${NC}"
                read -p "Nhấn Enter để tiếp tục..."
                return
            fi
            
            # Xóa cấu hình Nginx
            rm -f "/etc/nginx/sites-enabled/$domain"
            rm -f "/etc/nginx/sites-available/$domain"
            
            # Xóa thư mục web
            rm -rf "$WEB_ROOT/$domain"
            
            # Reload Nginx
            systemctl reload nginx
            
            echo -e "${GREEN}Domain $domain đã được xóa thành công${NC}"
            ;;
        3)
            echo -e "${GREEN}Danh sách domain:${NC}"
            ls -1 "$WEB_ROOT" | grep -v "default"
            ;;
        0)
            return
            ;;
        *)
            echo -e "${RED}Lựa chọn không hợp lệ${NC}"
            ;;
    esac
    
    read -p "Nhấn Enter để tiếp tục..."
}

# Function quản lý SSL
manage_ssl() {
    clear
    echo -e "${GREEN}=== QUẢN LÝ SSL ===${NC}"
    echo
    echo -e "${YELLOW}1.${NC} Cài đặt SSL cho domain"
    echo -e "${YELLOW}2.${NC} Gia hạn SSL"
    echo -e "${YELLOW}3.${NC} Xóa SSL"
    echo -e "${YELLOW}0.${NC} Quay lại"
    echo
    read -p "Nhập lựa chọn của bạn: " ssl_choice
    
    case $ssl_choice in
        1)
            read -p "Nhập tên domain: " domain
            if [ -z "$domain" ]; then
                echo -e "${RED}Domain không được để trống${NC}"
                read -p "Nhấn Enter để tiếp tục..."
                return
            fi
            
            # Cài đặt SSL
            certbot --nginx -d "$domain" -d "www.$domain" --non-interactive --agree-tos --email admin@$domain
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}SSL đã được cài đặt thành công cho domain $domain${NC}"
            else
                echo -e "${RED}Lỗi khi cài đặt SSL${NC}"
            fi
            ;;
        2)
            # Gia hạn tất cả SSL
            certbot renew --dry-run
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}SSL đã được gia hạn thành công${NC}"
            else
                echo -e "${RED}Lỗi khi gia hạn SSL${NC}"
            fi
            ;;
        3)
            read -p "Nhập tên domain: " domain
            if [ -z "$domain" ]; then
                echo -e "${RED}Domain không được để trống${NC}"
                read -p "Nhấn Enter để tiếp tục..."
                return
            fi
            
            # Xóa SSL
            certbot delete --cert-name "$domain"
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}SSL đã được xóa thành công cho domain $domain${NC}"
            else
                echo -e "${RED}Lỗi khi xóa SSL${NC}"
            fi
            ;;
        0)
            return
            ;;
        *)
            echo -e "${RED}Lựa chọn không hợp lệ${NC}"
            ;;
    esac
    
    read -p "Nhấn Enter để tiếp tục..."
}

# Function quản lý database
manage_database() {
    clear
    echo -e "${GREEN}=== QUẢN LÝ DATABASE ===${NC}"
    echo
    echo -e "${YELLOW}1.${NC} Tạo database mới"
    echo -e "${YELLOW}2.${NC} Xóa database"
    echo -e "${YELLOW}3.${NC} Tạo user mới"
    echo -e "${YELLOW}4.${NC} Xóa user"
    echo -e "${YELLOW}5.${NC} Danh sách database"
    echo -e "${YELLOW}0.${NC} Quay lại"
    echo
    read -p "Nhập lựa chọn của bạn: " db_choice
    
    case $db_choice in
        1)
            read -p "Nhập tên database: " dbname
            if [ -z "$dbname" ]; then
                echo -e "${RED}Tên database không được để trống${NC}"
                read -p "Nhấn Enter để tiếp tục..."
                return
            fi
            
            # Tạo database
            mysql -e "CREATE DATABASE IF NOT EXISTS \`$dbname\`;"
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}Database $dbname đã được tạo thành công${NC}"
            else
                echo -e "${RED}Lỗi khi tạo database${NC}"
            fi
            ;;
        2)
            read -p "Nhập tên database cần xóa: " dbname
            if [ -z "$dbname" ]; then
                echo -e "${RED}Tên database không được để trống${NC}"
                read -p "Nhấn Enter để tiếp tục..."
                return
            fi
            
            # Xóa database
            mysql -e "DROP DATABASE IF EXISTS \`$dbname\`;"
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}Database $dbname đã được xóa thành công${NC}"
            else
                echo -e "${RED}Lỗi khi xóa database${NC}"
            fi
            ;;
        3)
            read -p "Nhập tên user: " username
            read -s -p "Nhập mật khẩu: " password
            echo
            
            if [ -z "$username" ] || [ -z "$password" ]; then
                echo -e "${RED}Username và password không được để trống${NC}"
                read -p "Nhấn Enter để tiếp tục..."
                return
            fi
            
            # Tạo user
            mysql -e "CREATE USER '$username'@'localhost' IDENTIFIED BY '$password';"
            mysql -e "GRANT ALL PRIVILEGES ON *.* TO '$username'@'localhost';"
            mysql -e "FLUSH PRIVILEGES;"
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}User $username đã được tạo thành công${NC}"
            else
                echo -e "${RED}Lỗi khi tạo user${NC}"
            fi
            ;;
        4)
            read -p "Nhập tên user cần xóa: " username
            if [ -z "$username" ]; then
                echo -e "${RED}Tên user không được để trống${NC}"
                read -p "Nhấn Enter để tiếp tục..."
                return
            fi
            
            # Xóa user
            mysql -e "DROP USER '$username'@'localhost';"
            mysql -e "FLUSH PRIVILEGES;"
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}User $username đã được xóa thành công${NC}"
            else
                echo -e "${RED}Lỗi khi xóa user${NC}"
            fi
            ;;
        5)
            echo -e "${GREEN}Danh sách database:${NC}"
            mysql -e "SHOW DATABASES;" | grep -v "Database\|information_schema\|performance_schema\|mysql"
            ;;
        0)
            return
            ;;
        *)
            echo -e "${RED}Lựa chọn không hợp lệ${NC}"
            ;;
    esac
    
    read -p "Nhấn Enter để tiếp tục..."
}

# Function quản lý backup
manage_backup() {
    clear
    echo -e "${GREEN}=== QUẢN LÝ BACKUP ===${NC}"
    echo
    echo -e "${YELLOW}1.${NC} Backup toàn bộ website"
    echo -e "${YELLOW}2.${NC} Backup database"
    echo -e "${YELLOW}3.${NC} Khôi phục website"
    echo -e "${YELLOW}4.${NC} Khôi phục database"
    echo -e "${YELLOW}0.${NC} Quay lại"
    echo
    read -p "Nhập lựa chọn của bạn: " backup_choice
    
    case $backup_choice in
        1)
            # Tạo thư mục backup
            backup_dir="/root/backups/websites/$(date +%Y%m%d_%H%M%S)"
            mkdir -p "$backup_dir"
            
            # Backup toàn bộ website
            tar -czf "$backup_dir/websites.tar.gz" -C "$WEB_ROOT" .
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}Backup website đã được tạo tại $backup_dir/websites.tar.gz${NC}"
            else
                echo -e "${RED}Lỗi khi tạo backup website${NC}"
            fi
            ;;
        2)
            # Tạo thư mục backup
            backup_dir="/root/backups/databases/$(date +%Y%m%d_%H%M%S)"
            mkdir -p "$backup_dir"
            
            # Backup toàn bộ database
            mysqldump --all-databases > "$backup_dir/all_databases.sql"
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}Backup database đã được tạo tại $backup_dir/all_databases.sql${NC}"
            else
                echo -e "${RED}Lỗi khi tạo backup database${NC}"
            fi
            ;;
        3)
            read -p "Nhập đường dẫn file backup: " backup_file
            if [ -z "$backup_file" ] || [ ! -f "$backup_file" ]; then
                echo -e "${RED}File backup không tồn tại${NC}"
                read -p "Nhấn Enter để tiếp tục..."
                return
            fi
            
            # Khôi phục website
            tar -xzf "$backup_file" -C "$WEB_ROOT"
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}Website đã được khôi phục thành công${NC}"
            else
                echo -e "${RED}Lỗi khi khôi phục website${NC}"
            fi
            ;;
        4)
            read -p "Nhập đường dẫn file backup: " backup_file
            if [ -z "$backup_file" ] || [ ! -f "$backup_file" ]; then
                echo -e "${RED}File backup không tồn tại${NC}"
                read -p "Nhấn Enter để tiếp tục..."
                return
            fi
            
            # Khôi phục database
            mysql < "$backup_file"
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}Database đã được khôi phục thành công${NC}"
            else
                echo -e "${RED}Lỗi khi khôi phục database${NC}"
            fi
            ;;
        0)
            return
            ;;
        *)
            echo -e "${RED}Lựa chọn không hợp lệ${NC}"
            ;;
    esac
    
    read -p "Nhấn Enter để tiếp tục..."
}

# Function quản lý service
manage_service() {
    clear
    echo -e "${GREEN}=== QUẢN LÝ SERVICE ===${NC}"
    echo
    echo -e "${YELLOW}1.${NC} Khởi động lại Nginx"
    echo -e "${YELLOW}2.${NC} Khởi động lại PHP-FPM"
    echo -e "${YELLOW}3.${NC} Khởi động lại MariaDB"
    echo -e "${YELLOW}4.${NC} Khởi động lại Redis"
    echo -e "${YELLOW}5.${NC} Trạng thái các service"
    echo -e "${YELLOW}0.${NC} Quay lại"
    echo
    read -p "Nhập lựa chọn của bạn: " service_choice
    
    case $service_choice in
        1)
            systemctl restart nginx
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}Nginx đã được khởi động lại thành công${NC}"
            else
                echo -e "${RED}Lỗi khi khởi động lại Nginx${NC}"
            fi
            ;;
        2)
            systemctl restart php8.1-fpm
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}PHP-FPM đã được khởi động lại thành công${NC}"
            else
                echo -e "${RED}Lỗi khi khởi động lại PHP-FPM${NC}"
            fi
            ;;
        3)
            systemctl restart mariadb
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}MariaDB đã được khởi động lại thành công${NC}"
            else
                echo -e "${RED}Lỗi khi khởi động lại MariaDB${NC}"
            fi
            ;;
        4)
            systemctl restart redis-server
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}Redis đã được khởi động lại thành công${NC}"
            else
                echo -e "${RED}Lỗi khi khởi động lại Redis${NC}"
            fi
            ;;
        5)
            echo -e "${GREEN}Trạng thái các service:${NC}"
            echo
            echo -e "${YELLOW}Nginx:${NC}"
            systemctl status nginx | grep "Active:"
            echo
            echo -e "${YELLOW}PHP-FPM:${NC}"
            systemctl status php8.1-fpm | grep "Active:"
            echo
            echo -e "${YELLOW}MariaDB:${NC}"
            systemctl status mariadb | grep "Active:"
            echo
            echo -e "${YELLOW}Redis:${NC}"
            systemctl status redis-server | grep "Active:"
            ;;
        0)
            return
            ;;
        *)
            echo -e "${RED}Lựa chọn không hợp lệ${NC}"
            ;;
    esac
    
    read -p "Nhấn Enter để tiếp tục..."
}

# Function cài đặt Laravel
install_laravel() {
    clear
    echo -e "${GREEN}=== CÀI ĐẶT LARAVEL ===${NC}"
    echo
    read -p "Nhập tên domain: " domain
    if [ -z "$domain" ]; then
        echo -e "${RED}Domain không được để trống${NC}"
        read -p "Nhấn Enter để tiếp tục..."
        return
    fi
    
    # Tạo thư mục cho Laravel
    mkdir -p "$WEB_ROOT/$domain"
    cd "$WEB_ROOT/$domain"
    
    # Cài đặt Laravel
    composer create-project laravel/laravel .
    
    if [ $? -eq 0 ]; then
        # Phân quyền
        chown -R www-data:www-data .
        chmod -R 755 .
        chmod -R 777 storage bootstrap/cache
        
        # Tạo database
        read -p "Nhập tên database: " dbname
        read -p "Nhập username database: " dbuser
        read -s -p "Nhập password database: " dbpass
        echo
        
        mysql -e "CREATE DATABASE IF NOT EXISTS \`$dbname\`;"
        mysql -e "CREATE USER IF NOT EXISTS '$dbuser'@'localhost' IDENTIFIED BY '$dbpass';"
        mysql -e "GRANT ALL PRIVILEGES ON \`$dbname\`.* TO '$dbuser'@'localhost';"
        mysql -e "FLUSH PRIVILEGES;"
        
        # Cấu hình .env
        sed -i "s/DB_DATABASE=laravel/DB_DATABASE=$dbname/" .env
        sed -i "s/DB_USERNAME=root/DB_USERNAME=$dbuser/" .env
        sed -i "s/DB_PASSWORD=/DB_PASSWORD=$dbpass/" .env
        
        # Tạo key
        php artisan key:generate
        
        # Chạy migration
        php artisan migrate
        
        echo -e "${GREEN}Laravel đã được cài đặt thành công tại domain $domain${NC}"
    else
        echo -e "${RED}Lỗi khi cài đặt Laravel${NC}"
    fi
    
    read -p "Nhấn Enter để tiếp tục..."
}

# Function hiển thị thông tin server
show_server_info() {
    clear
    echo -e "${GREEN}=== THÔNG TIN SERVER ===${NC}"
    echo
    echo -e "${YELLOW}Thông tin hệ thống:${NC}"
    echo "OS: $(lsb_release -d | cut -f2)"
    echo "Kernel: $(uname -r)"
    echo "CPU: $(grep "model name" /proc/cpuinfo | head -n1 | cut -d: -f2)"
    echo "RAM: $(free -h | grep Mem | awk '{print $2}')"
    echo "Disk: $(df -h / | tail -n1 | awk '{print $2}')"
    echo
    echo -e "${YELLOW}Thông tin network:${NC}"
    echo "IP: $(ip addr show | grep -w inet | grep -v 127.0.0.1 | awk '{print $2}' | cut -d/ -f1)"
    echo
    echo -e "${YELLOW}Thông tin các service:${NC}"
    echo "Nginx: $(nginx -v 2>&1)"
    echo "PHP: $(php -v | head -n1)"
    echo "MariaDB: $(mysql --version)"
    echo "Redis: $(redis-cli --version)"
    echo "Composer: $(composer --version | head -n1)"
    echo "Node.js: $(node -v)"
    echo
    echo -e "${YELLOW}Thông tin website:${NC}"
    echo "Web root: $WEB_ROOT"
    echo "Số lượng domain: $(ls -1 "$WEB_ROOT" | wc -l)"
    echo "Số lượng SSL: $(certbot certificates | grep "Domains:" | wc -l)"
    echo
    echo -e "${YELLOW}Thông tin database:${NC}"
    echo "Số lượng database: $(mysql -e "SHOW DATABASES;" | grep -v "Database\|information_schema\|performance_schema\|mysql" | wc -l)"
    echo "Số lượng user: $(mysql -e "SELECT COUNT(*) FROM mysql.user;" | tail -n1)"
    
    read -p "Nhấn Enter để tiếp tục..."
}

# Function cập nhật panel
update_panel() {
    clear
    echo -e "${GREEN}=== CẬP NHẬT PANEL ===${NC}"
    echo
    
    # Kiểm tra phiên bản hiện tại
    current_version=$(cat "$CONFIG_DIR/version")
    echo -e "${YELLOW}Phiên bản hiện tại: $current_version${NC}"
    
    # Tải phiên bản mới
    echo "Đang tải phiên bản mới..."
    wget -q -O /tmp/webestvps_new.sh https://raw.githubusercontent.com/webestvps/script-lemp/main/setup.sh
    
    if [ $? -eq 0 ]; then
        # Kiểm tra phiên bản mới
        new_version=$(grep "version=" /tmp/webestvps_new.sh | cut -d'"' -f2)
        
        if [ "$new_version" != "$current_version" ]; then
            echo -e "${GREEN}Đã tìm thấy phiên bản mới: $new_version${NC}"
            read -p "Bạn có muốn cập nhật không? (y/n): " update_choice
            
            if [ "$update_choice" = "y" ]; then
                # Cập nhật
                mv /tmp/webestvps_new.sh "$INSTALL_DIR/setup.sh"
                chmod +x "$INSTALL_DIR/setup.sh"
                echo "$new_version" > "$CONFIG_DIR/version"
                echo -e "${GREEN}Panel đã được cập nhật thành công${NC}"
            else
                rm /tmp/webestvps_new.sh
                echo -e "${YELLOW}Đã hủy cập nhật${NC}"
            fi
        else
            echo -e "${GREEN}Bạn đang sử dụng phiên bản mới nhất${NC}"
            rm /tmp/webestvps_new.sh
        fi
    else
        echo -e "${RED}Lỗi khi tải phiên bản mới${NC}"
    fi
    
    read -p "Nhấn Enter để tiếp tục..."
}

# Vòng lặp chính
while true; do
    show_menu
    
    case $choice in
        1)
            manage_domain
            ;;
        2)
            manage_ssl
            ;;
        3)
            manage_database
            ;;
        4)
            manage_backup
            ;;
        5)
            manage_service
            ;;
        6)
            install_laravel
            ;;
        7)
            show_server_info
            ;;
        8)
            update_panel
            ;;
        0)
            echo -e "${GREEN}Cảm ơn bạn đã sử dụng WebEST VPS Panel${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Lựa chọn không hợp lệ${NC}"
            read -p "Nhấn Enter để tiếp tục..."
            ;;
    esac
done 